(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{276:function(t,e,n){var content=n(295);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(105).default)("d3dbc5a4",content,!0,{sourceMap:!1})},294:function(t,e,n){"use strict";n(276)},295:function(t,e,n){var o=n(104)(!1);o.push([t.i,"canvas.webgl{position:fixed;width:100vw;height:100vh;mix-blend-mode:darken;pointer-events:none}",""]),t.exports=o},316:function(t,e,n){"use strict";n.r(e);n(17),n(35);var o=n(280),r=n(309),l=n.n(r),c=(n(290),n(142)),d=n(141),m=n(278),h=n(296),v=n(291),f=n(279);function w(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,o=Object(f.a)(t);if(e){var r=Object(f.a)(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return Object(v.a)(this,n)}}var x=function(t){Object(h.a)(n,t);var e=w(n);function n(t){var r,l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(d.a)(this,n),r=e.call(this,t);var c=Object(m.a)(r),h=void 0!==l.textureWidth?l.textureWidth:512,v=void 0!==l.textureHeight?l.textureHeight:512,f=(void 0!==l.clipBias&&l.clipBias,void 0!==l.alpha?l.alpha:1),time=void 0!==l.time?l.time:0,w=void 0!==l.waterNormals?l.waterNormals:null,x=void 0!==l.sunDirection?l.sunDirection:new o.o(.70707,.70707,0),y=new o.a(void 0!==l.sunColor?l.sunColor:16777215),S=new o.a(void 0!==l.waterColor?l.waterColor:8355711),z=void 0!==l.eye?l.eye:new o.o(0,0,0),C=void 0!==l.distortionScale?l.distortionScale:20,_=void 0!==l.side?l.side:o.b,M=void 0!==l.fog&&l.fog,D=(new o.g,new o.o),view=(new o.o,new o.o,new o.d,new o.o(0,0,-1),new o.p,new o.o),L=(new o.o,new o.p,new o.d),P=new o.f,N=new o.q(h,v),R={uniforms:o.n.merge([o.m.fog,o.m.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:100},distortionScale:{value:2},textureMatrix:{value:new o.d},sunColor:{value:new o.a(16777215)},sunDirection:{value:new o.o(.70707,.70707,0)},eye:{value:new o.o},waterColor:{value:new o.a(0)}}]),vertexShader:"\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}",fragmentShader:"\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance * 0.5);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n                    if (outgoingLight.x + outgoingLight.y + outgoingLight.z < 0.165){\n                        outgoingLight.xyz = vec3(0.,0.,0.);\n                    } \n\t\t\t\t\telse {\n\t\t\t\t\t\toutgoingLight.xyz = vec3(1.,1.,1.);\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}"},j=new o.j({fragmentShader:R.fragmentShader,vertexShader:R.vertexShader,uniforms:o.n.clone(R.uniforms),lights:!1,side:_,fog:M});return j.uniforms.mirrorSampler.value=N.texture,j.uniforms.textureMatrix.value=L,j.uniforms.alpha.value=f,j.uniforms.time.value=time,j.uniforms.normalSampler.value=w,j.uniforms.sunColor.value=y,j.uniforms.waterColor.value=S,j.uniforms.sunDirection.value=x,j.uniforms.distortionScale.value=C,j.uniforms.eye.value=z,c.material=j,c.onBeforeRender=function(t,e,n){if(!(view.dot(D)>0)){var o=t.getRenderTarget(),r=t.xr.enabled,l=t.shadowMap.autoUpdate;c.visible=!1,t.xr.enabled=!1,t.shadowMap.autoUpdate=!1,t.setRenderTarget(N),t.state.buffers.depth.setMask(!0),!1===t.autoClear&&t.clear(),t.render(e,P),c.visible=!0,t.xr.enabled=r,t.shadowMap.autoUpdate=l,t.setRenderTarget(o);var d=n.viewport;void 0!==d&&t.state.viewport(d)}},r}return Object(c.a)(n)}(o.e);x.prototype.isWater=!0;var y={name:"Three",data:function(){return{camera:null,scene:null,renderer:null,mesh:null,stats:null,loadingManager:null,geometry:null,sizes:{width:null,height:null},cursor:{x:null,y:null},waterMesh:null,eyeAnimation:!1}},methods:{init:function(){var canvas=document.querySelector("canvas.webgl");this.loadingManager=new o.c,this.loadingManager.onLoad=function(){},this.sizes.width=window.innerWidth,this.sizes.height=window.innerHeight,this.camera=new o.f(75,this.sizes.width/this.sizes.height,1e-4,100),this.camera.position.x=0,this.camera.position.y=-.3,this.camera.position.z=1.1,this.camera.lookAt(0,0,0),this.scene=new o.i,this.renderer=new o.r({canvas:canvas,alpha:!0,antialias:!1}),this.renderer.setSize(this.sizes.width,this.sizes.height),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.geometry=new o.k(1,64,64)},initStats:function(){this.stats=new l.a,this.stats.showPanel(0),document.body.appendChild(this.stats.dom),this.stats.dom.classList.add("fps"),this.stats.dom.style.width="100%",this.stats.dom.style.height="100%",this.stats.dom.style.position="static",document.querySelector(".dev-point-1-wrap").appendChild(this.stats.dom),document.querySelector(".fps").removeChild(document.querySelector(".fps").lastChild),document.querySelectorAll(".fps canvas").forEach((function(canvas){canvas.style.width="100%",canvas.style.height="60%"}))},addEventListeners:function(){var t=this;window.addEventListener("resize",(function(){t.resize()}));var e=new o.o(0,0,0);document.body.addEventListener("mousemove",(function(n){1==t.eyeAnimation&&(e.x=5e-4*n.clientX,e.y=8e-4*n.clientY,t.waterMesh.material.uniforms.eye.value=e)}))},initWater:function(){this.waterMesh=new x(this.geometry,{textureWidth:512,textureHeight:512,waterNormals:(new o.l).load("/img/normals.jpg",(function(t){t.wrapS=t.wrapT=o.h})),sunDirection:new o.o(.5,0,0),sunColor:16777215,waterColor:16777215,distortionScale:200,fog:void 0}),this.scene.add(this.waterMesh)},resize:function(){this.sizes.width=window.innerWidth,this.sizes.height=window.innerHeight,this.camera.aspect=this.sizes.width/this.sizes.height,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.sizes.width,this.sizes.height),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),document.querySelector(".name h1").style.fontSize="8.3vw"},animate:function(){this.stats.begin(),this.waterMesh.material.uniforms.time.value+=.005,this.camera.lookAt(0,0,0),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.animate),this.stats.end()}},mounted:function(){var t=this;this.init(),this.initWater(),this.addEventListeners(),this.$nuxt.$on("cameraUpdate",(function(e){t.camera.position.y=e.y,t.camera.position.z=e.z})),this.$nuxt.$on("eyeAnimationFalse",(function(){t.eyeAnimation=!1,t.waterMesh.material.uniforms.eye.value=new o.o})),this.$nuxt.$on("eyeAnimationTrue",(function(){t.eyeAnimation=!0}));var e=!1;this.$nuxt.$on("third-grid-loaded",(function(){0==e&&(t.initStats(),t.animate(),e=!0)}))}},S=(n(294),n(43)),component=Object(S.a)(y,(function(){var t=this.$createElement;return(this._self._c||t)("canvas",{staticClass:"webgl"})}),[],!1,null,null,null);e.default=component.exports}}]);